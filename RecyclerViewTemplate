#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME}#end

import androidx.recyclerview.widget.RecyclerView
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.AsyncListDiffer
import androidx.recyclerview.widget.DiffUtil

#parse("File Header.java")
class ${NAME} : RecyclerView.Adapter<${NAME}.${ViewHolder_Class}>(){

  val DIFF_CALLBACK = object: DiffUtil.ItemCallback<${Model_Class}>(){

    override fun areItemsTheSame(oldItem: ${Model_Class}, newItem: ${Model_Class}): Boolean {
      TODO("not implemented")
    }

    override fun areContentsTheSame(oldItem: ${Model_Class}, newItem: ${Model_Class}): Boolean {
      TODO("not implemented")
    }

  }
  
  private val items = AsyncListDiffer(this, DIFF_CALLBACK)
  var itemClickListener: ((data: ${Model_Class}) -> Unit)? = null

  override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ${ViewHolder_Class} {
    val binding = ${Item_Layout}Binding.inflate(LayoutInflater.from(parent.context), parent, false)
        return ${ViewHolder_Class}(binding)
  }

  override fun onBindViewHolder(holder: ${ViewHolder_Class}, position: Int) {
      holder.bind(items.currentList[position], itemClickListener)
  }

  override fun getItemCount(): Int {
      return items.currentList.size
  }

  fun submitList(list: List<${Model_Class}>){
      items.submitList(list)
  }

  class ${ViewHolder_Class}(private val binding: ${Item_Layout}Binding) : 
            RecyclerView.ViewHolder(binding.root){
            
        val glide by lazy { Glide.with(binding.root.context) }
        
        fun bind(data: ${Model_Class}, itemClickListener: ((data: ${Model_Class}) -> Unit)?) {
            with(binding) {
                TODO("bind view with data")
                root.setOnClickListener { itemClickListener?.invoke(data) }
            }
        }
  }

}